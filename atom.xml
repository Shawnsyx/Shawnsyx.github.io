<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>是非曲吉祥物</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="shawnsyx.top/"/>
  <updated>2019-03-23T07:35:39.861Z</updated>
  <id>shawnsyx.top/</id>
  
  <author>
    <name>霄先生吃元宵</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JAVA学习记录</title>
    <link href="shawnsyx.top/2019/03/22/JAVA%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    <id>shawnsyx.top/2019/03/22/JAVA学习记录/</id>
    <published>2019-03-22T03:00:27.000Z</published>
    <updated>2019-03-23T07:35:39.861Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;Lab2的要求看得我一头雾水，又是接口又是不变量的，往日中学时代被老师手把手教的日子果真一去不复返了,不过这种大学的学习方式可能更接近于以后人生中的独自上下求索的艰辛历程吧……</p><h1 id="Interface-接口"><a href="#Interface-接口" class="headerlink" title="Interface 接口"></a>Interface 接口</h1><p>&emsp;根据百度百科</p><blockquote><p>&emsp;Java接口是一系列方法的声明，是一些方法特征的集合，一个接口只有方法的特征没有方法的实现，因此这些方法可以在不同的地方被不同的类实现，而这些实现可以具有不同的行为（功能）。<br><br>&emsp;两种含义：一，Java接口，Java语言中存在的结构，有特定的语法和结构；二，一个类所具有的方法的特征集合，是一种逻辑上的抽象。前者叫做“Java接口”，后者叫做“接口”。</p></blockquote><h1 id="静态方法和非静态方法"><a href="#静态方法和非静态方法" class="headerlink" title="静态方法和非静态方法"></a>静态方法和非静态方法</h1><p>&emsp;<br>在外部调用静态方法时，可以使用”类名.方法名”的方式，也可以使用”对象名.方法名”的方式。而实例方法只有后面这种方式。也就是说，调用静态方法可以无需创建对象。</p><p>静态方法在访问本类的成员时，只允许访问静态成员（即静态成员变量和静态方法），而不允许访问实例成员变量和实例方法；实例方法则无此限制。</p><h1 id="constructor（创造器）"><a href="#constructor（创造器）" class="headerlink" title="constructor（创造器）"></a>constructor（创造器）</h1><p>&emsp;构造器最大的用处就是在创建对象时执行初始化，当创建一个对象时，系统会为这个对象的实例进行默认的初始化。如果想改变这种默认的初始化，就可以通过自定义构造器来实现。例如软件构造实验中需要写一个ConcreteEdgesGraph</p><pre><code>// TODO constructor/** * construct a empty graph */public ConcreteEdgesGraph() {}</code></pre><h1 id="Assert-断言）"><a href="#Assert-断言）" class="headerlink" title="Assert (断言）"></a>Assert (断言）</h1><p>&emsp;(1)<code>assert [boolean表达式]</code><br><br>&emsp;&emsp;如果表达式为true,程序继续执行，若为false则抛出AssertionError，并终止执行。<br><br>&emsp;(2)<code>assert [boolean 表达式:错误表达式(日志)]</code><br><br>&emsp;&emsp;如果表达式为true，程序继续执行。如果为false，则程序抛出java.lang.AssertionError，输出[错误信息]。</p><h1 id="Iterator迭代器"><a href="#Iterator迭代器" class="headerlink" title="Iterator迭代器"></a>Iterator迭代器</h1><p>&emsp;就是提供一种方法对一个容器对象中的各个元素进行访问，而又不暴露该对象容器的内部细节。详见<a href="https://www.cnblogs.com/zyuze/p/7726582.html" target="_blank" rel="noopener">迭代器</a><br><br>而对应于SC实验中，对边的遍历涉及到迭代器的使用</p><pre><code>List&lt;Edge&gt; iteratorEdges = new ArrayList&lt;Edge&gt;(edges);    for(Edge i : iteratorEdges) {        if(i.getSource().equals(vertex) || i.getTarget().equals(vertex))            edges.remove(i);    }</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;Lab2的要求看得我一头雾水，又是接口又是不变量的，往日中学时代被老师手把手教的日子果真一去不复返了,不过这种大学的学习方式可能更接近于以后人生中的独自上下求索的艰辛历程吧……&lt;/p&gt;
&lt;h1 id=&quot;Interface-接口&quot;&gt;&lt;a href=&quot;#Interf
      
    
    </summary>
    
    
      <category term="笔记" scheme="shawnsyx.top/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>软件构造笔记</title>
    <link href="shawnsyx.top/2019/03/19/%E8%BD%AF%E4%BB%B6%E6%9E%84%E9%80%A0%E7%AC%94%E8%AE%B0/"/>
    <id>shawnsyx.top/2019/03/19/软件构造笔记/</id>
    <published>2019-03-19T13:23:45.000Z</published>
    <updated>2019-03-22T14:15:38.090Z</updated>
    
    <content type="html"><![CDATA[<p>  阅读材料来自于MIT的Software Construction课程 <a href="http://web.mit.edu/6.031/www/sp18/classes/11-abstraction-functions-rep-invariants/" target="_blank" rel="noopener">Reading 11: Abstraction Functions &amp; Rep Invariants</a>.<br><br>要点如下:<br><br>·<strong>invariant</strong><br><br>·<strong>representation exposure</strong><br><br>·<strong>abstraction functions</strong><br><br>·<strong>representation invariants</strong><br><br>The rep invariant will make it easier to catch bugs caused by a corrupted data structure.</p><h1 id="Invariants"><a href="#Invariants" class="headerlink" title="Invariants"></a>Invariants</h1><p>&emsp;一个好的抽象数据型(ADT)的关键：能否<strong>preserves its own invariants</strong></p><p>###Immutability<br>&emsp;看下面的例子<br><br></p><pre><code>public class Tweet {public String author;public String text;public Date timestamp;/** * Make a Tweet. * @param author    Twitter user who wrote the tweet * @param text      text of the tweet * @param timestamp date/time when the tweet was sent */public Tweet(String author, String text, Date timestamp) {    this.author = author;    this.text = text;    this.timestamp = timestamp;  }}</code></pre><p>&emsp;  如何确保<code>Tweet</code>类是不可变的呢？即一旦建立，相关属性不改变。<br><br>&emsp;威胁之一是客户端能够直接修改这个域。Representation exposure ：code outside the class can modify the representation directly.<br><br>&emsp;<br>不过辛亏有<code>private</code>和<code>final</code>，官方给出如下解释</p><blockquote><p>The private and public keywords indicate which fields and methods are accessible only within the class and which can be accessed from outside the class. The final keyword also helps by guaranteeing that the fields of this immutable type won’t be reassigned after the object is constructed.</p></blockquote><p><br>&emsp;一种策略就是<strong>防御式拷贝(defensive copying)</strong>。<br>例如：</p><pre><code>public Date getTimestamp() {    return new Date(timestamp.getTime());}</code></pre><p>&emsp;值得注意的是，另一种copy a mutable object is clone(),但是有些问题，暂且不谈。<br><br></p><pre><code>/** @return a list of 24 inspiring tweets, one per hour today */public static List&lt;Tweet&gt; tweetEveryHourToday () {   List&lt;Tweet&gt; list = new ArrayList&lt;Tweet&gt;();    Date date = new Date();   for (int i = 0; i &lt; 24; i++) {       date.setHours(i);       list.add(new Tweet(&quot;rbmllr&quot;, &quot;keep it up! you can do it&quot;, date));   } return list;}</code></pre><p><img src="http://web.mit.edu/6.031/www/sp18/classes/11-abstraction-functions-rep-invariants/figures/tweetEveryHourToday.png" alt><br><br>&emsp;所以不变性又被破坏了，采用一下策略：</p><pre><code>public Tweet(String author, String text, Date timestamp) {    this.author = author;    this.text = text;    this.timestamp = new Date(timestamp.getTime());}</code></pre><p>###Immutable wrappers around mutable data types<br>&emsp;此时，轮到我们的<code>Collections.unmodifiableList()</code>亮相。但是一个downside就是得到的所谓的immutability只是在runtime，but not at compile time. Java也不会在你试着<code>sort()</code>这个unmodifiable list的时候警告你，反而抛给你一个冷冰冰的异常。<br><br>&emsp;注意阅读练习里面的array相关的problem</p><h1 id="Rep-invariant-and-abstraction-function"><a href="#Rep-invariant-and-abstraction-function" class="headerlink" title="Rep invariant and abstraction function"></a>Rep invariant and abstraction function</h1><p>&emsp;关键不仅仅在于选取两个集合Space，而且在于选取什么的元素为合法，并且怎样将它们对应成抽象的值。</p><blockquote><p>not only choosing the two spaces… but also deciding which rep values are legal, and how to interpret them as abstract values.</p></blockquote><p>比如根据此图，我们得到下面的映射：<img src="http://web.mit.edu/6.031/www/sp18/classes/11-abstraction-functions-rep-invariants/figures/charset-af-ri.svg" alt><br>以下要点：<br><br>&emsp;<strong>·每一个抽象类都对应有原象</strong><br><br>&emsp;<strong>·一些抽象类映射前的原象不止一个</strong><br><br>&emsp;<strong>·而在集合R中并非所有元素都有映射的象</strong><br><br>&emsp;和实验相关一点，AF就是某个成员变量代表的抽象概念，RI就是对这个成员变量的限制。然而我这个傻子恍然大悟，AF就是”Abstraction functioin”,RI即为” Representation invariant”啊！！！<br><br>&emsp;从rep values到其所表示的抽象值之间的映射表示如下</p><blockquote><p>AF: R -&gt; A</p></blockquote><p> 同时也可以用<code>R → Boolean</code>的映射表示是否rep value和一个abstract values之间存在着对应关系。如下图所示<br><img src="http://web.mit.edu/6.031/www/sp18/classes/11-abstraction-functions-rep-invariants/figures/charset-norepeats.svg" alt><br>&emsp;对于表达值（rep value）而言， RI(r) 为真当且仅当r被AF映射。RI(“a”) = true, RI(“ac”) = true, 并且 RI(“acb”) = true, 但 RI(“aa”) = false and RI(“abbc”) = false.<br><br>&emsp;尽管有着不相同类型的rep value space 和相同的rep invariant，我们可以构建出不同的映射。例如“acgg”表示字符串之间的范围，[a-c]和[g-g]，所以代表的元素是集合set{a,b,c,g}.<br><br>&emsp;对于client of an abstract data type而言，visible and documented的应该为：abstract value space, creators, observes. 而不可见：abstraction function, rep 和 rep invariant.</p><blockquote><p>Rep invariant is a function from rep values to boolean.</p></blockquote><p>###Checkint the rep invariant<br>check的特点：</p><blockquote><p>&emsp;It’s good for an implementer to call <code>checkRep()</code> just before returning from a public method of an ADT class.<br><br>&emsp;<code>checkRep()</code> asserts the rep invariant.</p></blockquote><h3 id="No-null-values-in-the-rep"><a href="#No-null-values-in-the-rep" class="headerlink" title="No null values in the rep"></a>No null values in the rep</h3><h3 id="Beneficnet-mutation"><a href="#Beneficnet-mutation" class="headerlink" title="Beneficnet mutation"></a>Beneficnet mutation</h3><p>#Documenting the AF,RI, and safety from rep exposure<br>注意，在描述rep invariant and abstraction function的时候，必须注意：<br><br>&emsp;不能仅仅用“域内全员合法”来简简单单概括RI，重要的是explain是如何区分“合法”和“非法”的。<br><br>&emsp;同样的，对于AF而言，仅仅声明“represents a set of charaters”也是不够的。而应该<strong>define precisely how the concrete field values are interpreted</strong><br>而根据<a href="http://https://blog.csdn.net/weixin_39643135/article/details/80231152" target="_blank" rel="noopener">同学的解释</a></p><blockquote><p><strong>Rep exposure</strong>：<br><br>&emsp;java中数据类型分为mutable和immutable的，对前者进行的操作可能会改变其内部数据；而对后者的操作不改变其内部值，而是构造新的对象。因此，对于mutable的数据，如果没有良好的保护，意味着client对其的调用可以直接修改内部数据。</p></blockquote><h3 id="What-an-ADT-specification-may-talk-about"><a href="#What-an-ADT-specification-may-talk-about" class="headerlink" title="What an ADT specification may talk about"></a>What an ADT specification may talk about</h3><p><img src="http://web.mit.edu/6.031/www/sp18/classes/11-abstraction-functions-rep-invariants/figures/adt-firewall.svg" alt><br><br></p><h1 id="ADT-invariants-replace-preconditions"><a href="#ADT-invariants-replace-preconditions" class="headerlink" title="ADT invariants replace preconditions"></a>ADT invariants replace preconditions</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;  阅读材料来自于MIT的Software Construction课程 &lt;a href=&quot;http://web.mit.edu/6.031/www/sp18/classes/11-abstraction-functions-rep-invariants/&quot; target=
      
    
    </summary>
    
    
      <category term="笔记" scheme="shawnsyx.top/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>鄙人胡诌</title>
    <link href="shawnsyx.top/2019/03/19/blog/"/>
    <id>shawnsyx.top/2019/03/19/blog/</id>
    <published>2019-03-19T10:47:46.000Z</published>
    <updated>2019-03-19T12:33:18.003Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>  自修自持莫道此间非彼岸，即心即佛须知东土是西天</p></blockquote><hr><p> &ensp; 羡艳着橙子和钟哥的博客，自己也心痒痒，谁所菜鸡不能有自己的鸡笼？于是乎我也按着教程一步一步地de着bug，学着毫无技术含量的操作。<br><br><br>&ensp;或许写博客当有中学时代拿着尺子和铅笔一点点打格整理笔记的美感？我挺喜欢手字笔录的方式，但怎奈这越学越深的计算机世界不给你手字笔录的时间让你横平竖直工笔正楷地整理笔记。<br><br><br>&ensp;《离骚》中有“朝濯发于汤谷兮，夕晞余身兮九阳”，闭目仿佛看见一身高八尺有余形貌昳丽的长发美男于光中背对着你，可瞅瞅我现在满脸油光，痘印未消，面如土色，发型凌乱，眼小无神，体形消瘦······（再说下去我都把我自己说抑郁了）。美男这辈子估计是够呛，或许找个颜值高点的妹子改良基因后能让我儿子当上美男就不错了，我再努努力当上富二代他爹？<br><br><br>&ensp; 一点一点走吧，搭这个博客的时候曾经一度想放弃，为什么那么多的错？那么多的异常？<br><br><br>&ensp; 但是爹一直反对我做事三分钟热度或者半途而废。秉着“吾乃光宗耀祖之孙氏”的信念，忍着不挤额头上痘痘的冲动，我耐着性子开始了以后的博客之路。不过也好，有个能够宣泄的方寸之地······<br><br><br>&ensp; “是非曲吉祥物”是我和发小一块玩梦幻西游取的第一个人物名字，剑侠客-大唐官府。十多年来，人们走的走，留的留，自己也从任性妄为到忍耐包容的路上自修自持。有些事能够想，有些事只能放，放下那无奈不甘的执念吧。<br><br><br>&ensp; 完善阿里云的信息时跳出密保问题，“你儿时最好的伙伴”，我不假思索地填上cq，可是我们好久好久都没见面了，甚至好久好久都没有说过话了，我们仅存的联系方式就剩下了QQ，我搬了家，他去了外地。但是想一想，人生哪有这么多时间给你感慨呢？孤独的不是仅仅孤单的一人，还有那秋风乍起时望着万家灯火而独自彳亍的异乡客。<br><br><br>&ensp;不过当个风筝也是好的，虽被一线束缚起来，总不至于落得无处可归，总有人惦记着你，牵扯着你，不肯松手。<br><br><br>&ensp;可能是经历了一些事吧，我最近竟能在看似千篇一律的生活中活出一瞬间的“幸福感”：雏菊的花又开了些，托福听力又能多听懂些叽里呱啦的词了，洗澡的水温舒服了些······也忘了在哪抄的的这些：<br><br></p><blockquote><p>你为什么会爱上人类？他们没有永生，脆弱而匆忙<br><br>  &ensp;&ensp;就因为他们没有永生，害怕死亡，才有那么脆弱和匆忙。我爱上的是那脆弱中的争取和躁动，我爱上的是那随时会失去的短暂和恐慌。</p></blockquote><p>&ensp;穷且意坚，不堕青云之志。当自强，于人生路上不忘克己复礼。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;  自修自持莫道此间非彼岸，即心即佛须知东土是西天&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt; &amp;ensp; 羡艳着橙子和钟哥的博客，自己也心痒痒，谁所菜鸡不能有自己的鸡笼？于是乎我也按着教程一步一步地de着bug，学着毫无技术含量的操作
      
    
    </summary>
    
    
      <category term="竹林深处" scheme="shawnsyx.top/tags/%E7%AB%B9%E6%9E%97%E6%B7%B1%E5%A4%84/"/>
    
  </entry>
  
</feed>
